AliasDecl ["IDENT"]
Arguments ["("]
ArrayLength ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
ArrayType ["["]
Assignment ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
BaseType ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
BasicLit ["CHAR" "FLOAT" "IMAG" "INT" "STRING"]
Block ["{"]
BreakStmt ["break"]
Channel ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
ChannelType ["<-" "chan"]
CommCase ["case" "default"]
CommClause ["case" "default"]
CompositeLit ["IDENT" "[" "map" "struct"]
Condition ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
ConstDecl ["const"]
ConstSpec ["IDENT"]
ContinueStmt ["continue"]
Conversion ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
Declaration ["const" "type" "var"]
DeferStmt ["defer"]
Element ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct" "{"]
ElementList ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct" "{"]
ElementType ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
EmbeddedField ["*" "IDENT"]
ExprCaseClause ["case" "default"]
ExprSwitchCase ["case" "default"]
ExprSwitchStmt ["switch"]
Expression ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
ExpressionList ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
ExpressionStmt ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
FallthroughStmt ["fallthrough"]
FieldDecl ["*" "IDENT"]
FieldName ["IDENT"]
ForClause ["!" "&" "(" "*" "+" "-" ";" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
ForStmt ["for"]
FunctionBody ["{"]
FunctionDecl ["func"]
FunctionLit ["func"]
FunctionName ["IDENT"]
FunctionType ["func"]
GoStmt ["go"]
GotoStmt ["goto"]
IdentifierList ["IDENT"]
IfStmt ["if"]
ImportDecl ["import"]
ImportPath ["STRING"]
ImportSpec ["." "IDENT" "STRING"]
IncDecStmt ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
Index ["["]
InitStmt ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
InterfaceElem ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct" "~"]
InterfaceType ["interface"]
Key ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct" "{"]
KeyType ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
KeyedElement ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct" "{"]
Label ["IDENT"]
LabeledStmt ["IDENT"]
Literal ["CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "func" "map" "struct"]
LiteralType ["IDENT" "[" "map" "struct"]
LiteralValue ["{"]
MapType ["map"]
MethodDecl ["func"]
MethodElem ["IDENT"]
MethodExpr ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
MethodName ["IDENT"]
Operand ["(" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "func" "map" "struct"]
OperandName ["IDENT"]
PackageClause ["package"]
PackageName ["IDENT"]
ParameterDecl ["(" "*" "..." "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
ParameterList ["(" "*" "..." "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
Parameters ["("]
PointerType ["*"]
PostStmt ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
PrimaryExpr ["(" "*" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "chan" "func" "interface" "map" "struct"]
QualifiedIdent ["IDENT"]
RangeClause ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "range" "struct"]
Receiver ["("]
ReceiverType ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
RecvExpr ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
RecvStmt ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
Result ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
ReturnStmt ["return"]
SelectStmt ["select"]
Selector ["."]
SendStmt ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
ShortVarDecl ["IDENT"]
Signature ["("]
SimpleStmt ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
Slice ["["]
SliceType ["["]
SourceFile ["package"]
Statement ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "break" "chan" "const" "continue" "defer" "fallthrough" "for" "func" "go" "goto" "if" "interface" "map" "return" "select" "struct" "switch" "type" "var" "{"]
StatementList ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "break" "chan" "const" "continue" "defer" "fallthrough" "for" "func" "go" "goto" "if" "interface" "map" "return" "select" "struct" "switch" "type" "var" "{" "Îµ"]
StructType ["struct"]
SwitchStmt ["switch"]
Tag ["STRING"]
TopLevelDecl ["const" "func" "type" "var"]
Type ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
TypeArgs ["["]
TypeAssertion ["."]
TypeCaseClause ["case" "default"]
TypeConstraint ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct" "~"]
TypeDecl ["type"]
TypeDef ["IDENT"]
TypeElem ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct" "~"]
TypeList ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct"]
TypeLit ["*" "<-" "[" "chan" "func" "interface" "map" "struct"]
TypeName ["IDENT"]
TypeParamDecl ["IDENT"]
TypeParamList ["IDENT"]
TypeParameters ["["]
TypeSpec ["IDENT"]
TypeSwitchCase ["case" "default"]
TypeSwitchGuard ["(" "*" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "chan" "func" "interface" "map" "struct"]
TypeSwitchStmt ["switch"]
TypeTerm ["(" "*" "<-" "IDENT" "[" "chan" "func" "interface" "map" "struct" "~"]
UnaryExpr ["!" "&" "(" "*" "+" "-" "<-" "CHAR" "FLOAT" "IDENT" "IMAG" "INT" "STRING" "[" "^" "chan" "func" "interface" "map" "struct"]
UnderlyingType ["~"]
VarDecl ["var"]
VarSpec ["IDENT"]
float_lit ["FLOAT"]
identifier ["IDENT"]
imaginary_lit ["IMAG"]
int_lit ["INT"]
rune_lit ["CHAR"]
string_lit ["STRING"]