AliasDecl = identifier "=" Type .
Arguments = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
ArrayLength = Expression .
ArrayType = "[" ArrayLength "]" ElementType .
Assignment = ExpressionList ( "+=" | "-=" | "|=" | "^=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "&^=" | "=" ) ExpressionList .
BaseType = Type .
BasicLit = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
Block = "{" StatementList "}" .
BreakStmt = "break" [ Label ] .
Channel = Expression .
ChannelType = "<-" "chan" ElementType | "chan" "<-" ElementType | "chan" ElementType .
CommCase = "case" ( SendStmt | RecvStmt ) | "default" .
CommClause = CommCase ":" StatementList .
CompositeLit = LiteralType LiteralValue .
Condition = Expression .
ConstDecl = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
ConstSpec = IdentifierList [ [ Type ] "=" ExpressionList ] .
ContinueStmt = "continue" [ Label ] .
Conversion = Type "(" Expression [ "," ] ")" .
Declaration = ConstDecl | TypeDecl | VarDecl .
DeferStmt = "defer" Expression .
Element = Expression | LiteralValue .
ElementList = KeyedElement { "," KeyedElement } .
ElementType = Type .
EmbeddedField = [ "*" ] TypeName [ TypeArgs ] .
ExprCaseClause = ExprSwitchCase ":" StatementList .
ExprSwitchCase = "case" ExpressionList | "default" .
ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
Expression = UnaryExpr { ( "||" | "&&" | "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "|" | "^" | "*" | "/" | "%" | "<<" | ">>" | "&" | "&^" ) 	Expression } .
ExpressionList = Expression { "," Expression } .
ExpressionStmt = Expression .
FallthroughStmt = "fallthrough" .
FieldDecl = ( IdentifierList Type | EmbeddedField ) [ Tag ] .
FieldName = identifier .
ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
ForStmt = "for" ForClause Block | "for" RangeClause Block | "for" Condition Block | "for" Block .
FunctionBody = Block .
FunctionDecl = "func" FunctionName [ TypeParameters ] Signature [ FunctionBody ] .
FunctionLit = "func" Signature FunctionBody .
FunctionName = identifier .
FunctionType = "func" Signature .
GoStmt = "go" Expression .
GotoStmt = "goto" Label .
IdentifierList = identifier { "," identifier } .
IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
ImportDecl = "import" ( ImportSpec | "(" { ImportSpec ";" } ")" ) .
ImportPath = string_lit .
ImportSpec = [ "." | PackageName ] ImportPath .
IncDecStmt = Expression ( "++" | "--" ) .
Index = "[" Expression "]" .
InitStmt = SimpleStmt .
InterfaceElem = MethodElem | TypeElem .
InterfaceType = "interface" "{" [ InterfaceElem { ";" InterfaceElem } [ ";" ] ] "}" .
Key = Expression | FieldName | LiteralValue .
KeyType = Type .
KeyedElement = [ Key ":" ] Element .
Label = identifier .
LabeledStmt = Label ":" Statement .
Literal = BasicLit | CompositeLit | FunctionLit .
LiteralType = StructType | ArrayType | "[" "..." "]" ElementType | SliceType | MapType | TypeName [ TypeArgs ] .
LiteralValue = "{" [ ElementList [ "," ] ] "}" .
MapType = "map" "[" KeyType "]" ElementType .
MethodDecl = "func" Receiver MethodName Signature [ FunctionBody ] .
MethodElem = MethodName Signature .
MethodExpr = ReceiverType "." MethodName .
MethodName = identifier .
Operand = Literal | OperandName [ TypeArgs ] | "(" Expression ")" .
OperandName = identifier | QualifiedIdent .
PackageClause = "package" PackageName .
PackageName = identifier .
ParameterDecl = identifier "..." Type | identifier Type | "..." Type | Type .
ParameterList = ParameterDecl { "," ParameterDecl } .
Parameters = "(" [ ParameterList [ "," ] ] ")" .
PointerType = "*" BaseType .
PostStmt = SimpleStmt .
PrimaryExpr = ( Operand | Conversion | MethodExpr ) { Selector | Index | Slice | TypeAssertion | Arguments } .
QualifiedIdent = PackageName "." identifier .
RangeClause = [ ExpressionList "=" | IdentifierList ":=" ] "range" Expression .
Receiver = Parameters .
ReceiverType = Type .
RecvExpr = Expression .
RecvStmt = [ ExpressionList "=" | IdentifierList ":=" ] RecvExpr .
Result = Parameters | Type .
ReturnStmt = "return" [ ExpressionList ] .
SelectStmt = "select" "{" { CommClause } "}" .
Selector = "." identifier .
SendStmt = Channel "<-" Expression .
ShortVarDecl = IdentifierList ":=" ExpressionList .
Signature = Parameters [ Result ] .
SimpleStmt = Assignment | ShortVarDecl | IncDecStmt | SendStmt  | ExpressionStmt .
Slice = "[" [ Expression ] ":" [ Expression ] "]" | "[" [ Expression ] ":" Expression ":" Expression "]" .
SliceType = "[" "]" ElementType .
SourceFile = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
Statement = Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt .
StatementList = [ Statement { ";" Statement } [ ";" ] ] .
StructType = "struct" "{" [ FieldDecl { ";" FieldDecl } [ ";" ] ] "}" .
SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
Tag = string_lit .
TopLevelDecl = Declaration | FunctionDecl | MethodDecl .
Type = TypeName [ TypeArgs ] | TypeLit | "(" Type ")" .
TypeArgs = "[" TypeList [ "," ] "]" .
TypeAssertion = "." "(" Type ")" .
TypeCaseClause = TypeSwitchCase ":" StatementList .
TypeConstraint = TypeElem .
TypeDecl = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
TypeDef = identifier [ TypeParameters ] Type .
TypeElem = TypeTerm { "|" TypeTerm } .
TypeList = Type { "," Type } .
TypeLit = ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType .
TypeName = QualifiedIdent | identifier .
TypeParamDecl = IdentifierList TypeConstraint .
TypeParamList = TypeParamDecl { "," TypeParamDecl } .
TypeParameters = "[" TypeParamList [ "," ] "]" .
TypeSpec = AliasDecl | TypeDef .
TypeSwitchCase = "case" TypeList | "default" .
TypeSwitchGuard = [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" .
TypeSwitchStmt = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
TypeTerm = Type | UnderlyingType .
UnaryExpr = PrimaryExpr | ( "+" | "-" | "!" | "^" | "*" | "&" | "<-" ) UnaryExpr .
UnderlyingType = "~" Type .
VarDecl = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
VarSpec = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
float_lit = .
identifier = .
imaginary_lit = .
int_lit = .
rune_lit = .
string_lit = .
