// Code generated by "stringer -output stringer.go -linecomment -type=Ch,Kind"; DO NOT EDIT.

package gc

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[beforeTokens-57344]
	_ = x[ADD_ASSIGN-57345]
	_ = x[AND_ASSIGN-57346]
	_ = x[AND_NOT-57347]
	_ = x[AND_NOT_ASSIGN-57348]
	_ = x[ARROW-57349]
	_ = x[BREAK-57350]
	_ = x[CASE-57351]
	_ = x[CHAN-57352]
	_ = x[CONST-57353]
	_ = x[CONTINUE-57354]
	_ = x[DEC-57355]
	_ = x[DEFAULT-57356]
	_ = x[DEFER-57357]
	_ = x[DEFINE-57358]
	_ = x[ELLIPSIS-57359]
	_ = x[ELSE-57360]
	_ = x[EOF-57361]
	_ = x[EQ-57362]
	_ = x[FALLTHROUGH-57363]
	_ = x[FLOAT_LIT-57364]
	_ = x[FOR-57365]
	_ = x[FUNC-57366]
	_ = x[GE-57367]
	_ = x[GO-57368]
	_ = x[GOTO-57369]
	_ = x[IDENTIFIER-57370]
	_ = x[IF-57371]
	_ = x[IMAG_LIT-57372]
	_ = x[IMPORT-57373]
	_ = x[INC-57374]
	_ = x[INTERFACE-57375]
	_ = x[INT_LIT-57376]
	_ = x[LAND-57377]
	_ = x[LE-57378]
	_ = x[LOR-57379]
	_ = x[MAP-57380]
	_ = x[MUL_ASSIGN-57381]
	_ = x[NE-57382]
	_ = x[OR_ASSIGN-57383]
	_ = x[PACKAGE-57384]
	_ = x[QUO_ASSIGN-57385]
	_ = x[RANGE-57386]
	_ = x[REM_ASSIGN-57387]
	_ = x[RETURN-57388]
	_ = x[RUNE_LIT-57389]
	_ = x[SELECT-57390]
	_ = x[SHL-57391]
	_ = x[SHL_ASSIGN-57392]
	_ = x[SHR-57393]
	_ = x[SHR_ASSIGN-57394]
	_ = x[STRING_LIT-57395]
	_ = x[STRUCT-57396]
	_ = x[SUB_ASSIGN-57397]
	_ = x[SWITCH-57398]
	_ = x[TILDE-57399]
	_ = x[TYPE-57400]
	_ = x[VAR-57401]
	_ = x[XOR_ASSIGN-57402]
	_ = x[body-57403]
	_ = x[afterTokens-57404]
}

const _Ch_name = "beforeTokens+=&=&^&^=<-breakcasechanconstcontinue--defaultdefer:=...elseend of file==fallthroughfloating point literalforfunc>=gogotoidentifierifimaginary literalimport++interfaceinteger literal&&<=||map*=!=|=package/=range%=returnrune literalselect<<<<=>>>>=string literalstruct-=switch~typevar^=bodyafterTokens"

var _Ch_index = [...]uint16{0, 12, 14, 16, 18, 21, 23, 28, 32, 36, 41, 49, 51, 58, 63, 65, 68, 72, 83, 85, 96, 118, 121, 125, 127, 129, 133, 143, 145, 162, 168, 170, 179, 194, 196, 198, 200, 203, 205, 207, 209, 216, 218, 223, 225, 231, 243, 249, 251, 254, 256, 259, 273, 279, 281, 287, 288, 292, 295, 297, 301, 312}

func (i Ch) String() string {
	i -= 57344
	if i < 0 || i >= Ch(len(_Ch_index)-1) {
		return "Ch(" + strconv.FormatInt(int64(i+57344), 10) + ")"
	}
	return _Ch_name[_Ch_index[i]:_Ch_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidKind-0]
	_ = x[Alias-1]
	_ = x[Array-2]
	_ = x[Bool-3]
	_ = x[Chan-4]
	_ = x[Complex128-5]
	_ = x[Complex64-6]
	_ = x[Defined-7]
	_ = x[Float32-8]
	_ = x[Float64-9]
	_ = x[Function-10]
	_ = x[Int-11]
	_ = x[Int16-12]
	_ = x[Int32-13]
	_ = x[Int64-14]
	_ = x[Int8-15]
	_ = x[Interface-16]
	_ = x[Map-17]
	_ = x[Pointer-18]
	_ = x[Slice-19]
	_ = x[String-20]
	_ = x[Struct-21]
	_ = x[Uint-22]
	_ = x[Uint16-23]
	_ = x[Uint32-24]
	_ = x[Uint64-25]
	_ = x[Uint8-26]
	_ = x[Uintptr-27]
	_ = x[UntypedBool-28]
	_ = x[UntypedComplex-29]
	_ = x[UntypedFloat-30]
	_ = x[UntypedInt-31]
	_ = x[UntypedString-32]
	_ = x[Void-33]
}

const _Kind_name = "<invalid type>aliasarrayboolchancomplex128complex64typenamefloat32float64functionintint16int32int64int8interfacemappointerslicestringstructuintuint16uint32uint64uint8uintptruntyped booluntyped complexuntyped floatuntyped intuntyped stringvoid"

var _Kind_index = [...]uint8{0, 14, 19, 24, 28, 32, 42, 51, 59, 66, 73, 81, 84, 89, 94, 99, 103, 112, 115, 122, 127, 133, 139, 143, 149, 155, 161, 166, 173, 185, 200, 213, 224, 238, 242}

func (i Kind) String() string {
	if i < 0 || i >= Kind(len(_Kind_index)-1) {
		return "Kind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Kind_name[_Kind_index[i]:_Kind_index[i+1]]
}
